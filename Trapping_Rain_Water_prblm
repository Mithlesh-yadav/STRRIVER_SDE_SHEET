class Solution {
public:
    int trap(vector<int>& height) {
         int total = 0;
        vector<int> left;
        left.push_back(height[0]);
        vector<int> right;

        for (int i = 1; i < height.size(); i++) {
            int left_max = max(left[i - 1], height[i]); // Use left[i - 1] instead of height[i - 1]
            left.push_back(left_max);
        }

        right.push_back(height[height.size() - 1]);
        for (int i = height.size() - 2; i >= 0; i--) {
            int right_max = max(right[height.size() - i - 2], height[i]); // Use right[height.size() - i - 2] instead of height[i - 1]
            right.push_back(right_max);
        }
        reverse(right.begin(), right.end());

        for (int i = 0; i < height.size(); i++) {
            int p = min(left[i], right[i]);
            total += p - height[i];
        }
        return total;
    }
};
